-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Trash.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Trash.Object
import Trash.Interface
import Trash.Union
import Trash.Scalar
import Trash.InputObject
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)
import Trash.Enum.Metric


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor
type alias SaveTrashOptionalArguments = { volume : OptionalArgument Float, metric : OptionalArgument Trash.Enum.Metric.Metric }

type alias SaveTrashRequiredArguments = { date : Trash.Scalar.Date, token : String }

saveTrash : (SaveTrashOptionalArguments -> SaveTrashOptionalArguments) -> SaveTrashRequiredArguments -> SelectionSet decodesTo Trash.Object.SaveTrash -> Field (Maybe decodesTo) RootMutation
saveTrash fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { volume = Absent, metric = Absent }

        optionalArgs =
            [ Argument.optional "volume" filledInOptionals.volume (Encode.float), Argument.optional "metric" filledInOptionals.metric ((Encode.enum Trash.Enum.Metric.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionField "saveTrash" (optionalArgs ++ [ Argument.required "date" requiredArgs.date ((\(Trash.Scalar.Date raw) -> Encode.string raw)), Argument.required "token" requiredArgs.token (Encode.string) ]) (object_) (identity >> Decode.nullable)
