-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Trash.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Trash.Object
import Trash.Interface
import Trash.Union
import Trash.Scalar
import Trash.InputObject
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor
type alias StatsRequiredArguments = { token : String }

stats : StatsRequiredArguments -> SelectionSet decodesTo Trash.Object.StatsNode -> Field decodesTo RootQuery
stats requiredArgs object_ =
      Object.selectionField "stats" [ Argument.required "token" requiredArgs.token (Encode.string) ] (object_) (identity)


type alias AllTrashRequiredArguments = { token : String }

allTrash : AllTrashRequiredArguments -> SelectionSet decodesTo Trash.Object.TrashNode -> Field (List (Maybe decodesTo)) RootQuery
allTrash requiredArgs object_ =
      Object.selectionField "allTrash" [ Argument.required "token" requiredArgs.token (Encode.string) ] (object_) (identity >> Decode.nullable >> Decode.list)


type alias TrashRequiredArguments = { date : Trash.Scalar.Date, token : String }

trash : TrashRequiredArguments -> SelectionSet decodesTo Trash.Object.TrashNode -> Field (Maybe decodesTo) RootQuery
trash requiredArgs object_ =
      Object.selectionField "trash" [ Argument.required "date" requiredArgs.date ((\(Trash.Scalar.Date raw) -> Encode.string raw)), Argument.required "token" requiredArgs.token (Encode.string) ] (object_) (identity >> Decode.nullable)
