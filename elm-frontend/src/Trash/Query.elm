-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Trash.Query exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Trash.InputObject
import Trash.Interface
import Trash.Object
import Trash.Scalar
import Trash.Union


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


type alias StatsRequiredArguments =
    { token : String }


stats : StatsRequiredArguments -> SelectionSet decodesTo Trash.Object.StatsNode -> Field decodesTo RootQuery
stats requiredArgs object =
    Object.selectionField "stats" [ Argument.required "token" requiredArgs.token Encode.string ] object identity


type alias AllTrashRequiredArguments =
    { token : String }


allTrash : AllTrashRequiredArguments -> SelectionSet decodesTo Trash.Object.TrashNode -> Field (List (Maybe decodesTo)) RootQuery
allTrash requiredArgs object =
    Object.selectionField "allTrash" [ Argument.required "token" requiredArgs.token Encode.string ] object (identity >> Decode.nullable >> Decode.list)


type alias TrashRequiredArguments =
    { date : Trash.Scalar.Date, token : String }


trash : TrashRequiredArguments -> SelectionSet decodesTo Trash.Object.TrashNode -> Field (Maybe decodesTo) RootQuery
trash requiredArgs object =
    Object.selectionField "trash" [ Argument.required "date" requiredArgs.date (\(Trash.Scalar.Date raw) -> Encode.string raw), Argument.required "token" requiredArgs.token Encode.string ] object (identity >> Decode.nullable)
